{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\srajp\\\\Desktop\\\\sunday\\\\admin\\\\src\\\\components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport Header from './Header';\nimport SlotTable from './SlotTable';\nimport UserInfoModal from './UserInfoModal';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [slots, setSlots] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [isUserModalOpen, setIsUserModalOpen] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const navigate = useNavigate();\n  useEffect(() => {\n    const adminUser = JSON.parse(localStorage.getItem('adminUser'));\n    if (!adminUser) {\n      navigate('/');\n      return;\n    }\n    fetchSlots();\n\n    // Refresh data every 10 seconds\n    const interval = setInterval(fetchSlots, 10000);\n    return () => clearInterval(interval);\n  }, [navigate]);\n  const fetchSlots = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get('/api/slots');\n      if (response.data.success) {\n        setSlots(response.data.slots);\n      }\n    } catch (error) {\n      console.error('Error fetching slots:', error);\n      setError('Failed to load parking slots');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleForceExit = async slotNumber => {\n    try {\n      const response = await axios.post(`/api/admin/slots/${slotNumber}/force-exit`);\n      if (response.data.success) {\n        // Update slots after force exit\n        fetchSlots();\n      }\n    } catch (error) {\n      console.error('Error forcing exit:', error);\n      alert('Failed to force exit vehicle');\n    }\n  };\n  const handleViewUser = async slotNumber => {\n    try {\n      const response = await axios.get(`/api/slots/${slotNumber}/details`);\n      if (response.data.success && response.data.user) {\n        setSelectedUser({\n          ...response.data.user,\n          slotNumber,\n          entryTime: response.data.slot.entryTime\n        });\n        setIsUserModalOpen(true);\n      } else {\n        alert('No user information available for this slot');\n      }\n    } catch (error) {\n      console.error('Error fetching user details:', error);\n      alert('Failed to fetch user information');\n    }\n  };\n  const handleLogout = () => {\n    localStorage.removeItem('adminUser');\n    navigate('/');\n  };\n  if (loading && slots.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        style: {\n          marginTop: '100px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      onLogout: handleLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Parking Slots\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SlotTable, {\n          slots: slots,\n          onViewUser: handleViewUser,\n          onForceExit: handleForceExit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), isUserModalOpen && selectedUser && /*#__PURE__*/_jsxDEV(UserInfoModal, {\n      user: selectedUser,\n      onClose: () => setIsUserModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(Dashboard, \"QVY3QcAwKYBssqCo3blrIbncfc8=\", false, function () {\n  return [useNavigate];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","axios","Header","SlotTable","UserInfoModal","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","_s","slots","setSlots","selectedUser","setSelectedUser","isUserModalOpen","setIsUserModalOpen","loading","setLoading","error","setError","navigate","adminUser","JSON","parse","localStorage","getItem","fetchSlots","interval","setInterval","clearInterval","response","get","data","success","console","handleForceExit","slotNumber","post","alert","handleViewUser","user","entryTime","slot","handleLogout","removeItem","length","className","children","style","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","onLogout","onViewUser","onForceExit","onClose","_c","$RefreshReg$"],"sources":["C:/Users/srajp/Desktop/sunday/admin/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport Header from './Header';\r\nimport SlotTable from './SlotTable';\r\nimport UserInfoModal from './UserInfoModal';\r\n\r\nconst Dashboard = () => {\r\n  const [slots, setSlots] = useState([]);\r\n  const [selectedUser, setSelectedUser] = useState(null);\r\n  const [isUserModalOpen, setIsUserModalOpen] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n  \r\n  const navigate = useNavigate();\r\n  \r\n  useEffect(() => {\r\n    const adminUser = JSON.parse(localStorage.getItem('adminUser'));\r\n    if (!adminUser) {\r\n      navigate('/');\r\n      return;\r\n    }\r\n    \r\n    fetchSlots();\r\n    \r\n    // Refresh data every 10 seconds\r\n    const interval = setInterval(fetchSlots, 10000);\r\n    \r\n    return () => clearInterval(interval);\r\n  }, [navigate]);\r\n  \r\n  const fetchSlots = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.get('/api/slots');\r\n      \r\n      if (response.data.success) {\r\n        setSlots(response.data.slots);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching slots:', error);\r\n      setError('Failed to load parking slots');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  const handleForceExit = async (slotNumber) => {\r\n    try {\r\n      const response = await axios.post(`/api/admin/slots/${slotNumber}/force-exit`);\r\n      \r\n      if (response.data.success) {\r\n        // Update slots after force exit\r\n        fetchSlots();\r\n      }\r\n    } catch (error) {\r\n      console.error('Error forcing exit:', error);\r\n      alert('Failed to force exit vehicle');\r\n    }\r\n  };\r\n  \r\n  const handleViewUser = async (slotNumber) => {\r\n    try {\r\n      const response = await axios.get(`/api/slots/${slotNumber}/details`);\r\n      \r\n      if (response.data.success && response.data.user) {\r\n        setSelectedUser({\r\n          ...response.data.user,\r\n          slotNumber,\r\n          entryTime: response.data.slot.entryTime\r\n        });\r\n        setIsUserModalOpen(true);\r\n      } else {\r\n        alert('No user information available for this slot');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching user details:', error);\r\n      alert('Failed to fetch user information');\r\n    }\r\n  };\r\n  \r\n  const handleLogout = () => {\r\n    localStorage.removeItem('adminUser');\r\n    navigate('/');\r\n  };\r\n  \r\n  if (loading && slots.length === 0) {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"text-center\" style={{ marginTop: '100px' }}>\r\n          <h2>Loading...</h2>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  return (\r\n    <>\r\n      <Header onLogout={handleLogout} />\r\n      \r\n      <div className=\"container\">\r\n        {error && <div className=\"alert alert-danger\">{error}</div>}\r\n        \r\n        <div className=\"card\">\r\n          <h3>Parking Slots</h3>\r\n          <SlotTable \r\n            slots={slots} \r\n            onViewUser={handleViewUser}\r\n            onForceExit={handleForceExit}\r\n          />\r\n        </div>\r\n      </div>\r\n      \r\n      {isUserModalOpen && selectedUser && (\r\n        <UserInfoModal\r\n          user={selectedUser}\r\n          onClose={() => setIsUserModalOpen(false)}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dashboard; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}